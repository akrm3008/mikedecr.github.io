<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Michael DeCrescenzo</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Michael DeCrescenzo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Visualization of Partial Effects in Multiple Regression</title>
      <link>/2018/2018-10-19-partialling-out/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/2018-10-19-partialling-out/</guid>
      <description>Background A few days ago, Andrew Heiss was looking for a way to visualize multiple regression with an emphasis on one predictor, without 3(+)-dimensional plots. He works through a method and posts this cool animation, which shows the changing relationship between \(x\) and \(y\) when adding controls, superimposed over the scatterplot of the raw data. (He credits Pete Mohanty with the shifting abline idea.)
 Helpful animated #dataviz showing what happens to the slope of one coefficient in a model when controlling for other variables in multiple regression</description>
    </item>
    
    <item>
      <title>Great Hugo themes (that I did not pick)</title>
      <link>/2018/2018-09-23-hugo-themes/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/2018-09-23-hugo-themes/</guid>
      <description>I just finished a major website overhaul. While it took only about one day of work, I’ve had my eyes open for a new theme for Hugo for a while.
I mean, a while. I would download a theme, give it a 15-minute test run offline, and decide that it wasn’t for me. I did that maybe a dozen times.1
But this is mainly my fault. I am a bad combination of picky and unskilled with websites and web design, which made me a fickle chooser throughout the process.</description>
    </item>
    
    <item>
      <title>Packages &amp; Reproducibility: Install what you need, attach what you want</title>
      <link>/2018/2018-05-26-reproducible-packages/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/2018-05-26-reproducible-packages/</guid>
      <description>(Note: An earlier version of this post referred to “loading” packages when I really meant “attaching.” Thanks to Thomas Leeper for the clarification.)
When we distribute R code (for publication/replication archives, on Github, through blog posts, etc), we like the code to run smoothly on someone else’s machine. Packages present a nominal problem because different users have different packages installed on their computer. Ideally the script we are distributing should install dependencies without the redundancy of re-installing packages that a user already has installed.</description>
    </item>
    
  </channel>
</rss>